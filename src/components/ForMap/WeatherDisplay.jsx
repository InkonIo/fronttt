// components/ForMap/WeatherDisplay.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { useMap } from 'react-leaflet';
import L from 'leaflet';
import './WeatherDisplay.css'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å—Ç–∏–ª–µ–π

// !!! –í–ê–ñ–ù–û: –í–ê–® API-–ö–õ–Æ–ß –î–õ–Ø VISUAL CROSSING WEATHER API !!!
// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –∫–ª—é—á 'LZSBVS9Y74M92SKSKBZMFKMEP' –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ Visual Crossing.
// –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–¥–æ 1 –≥–æ–¥–∞) –∏ –ø—Ä–æ–≥–Ω–æ–∑ (–¥–æ 15 –¥–Ω–µ–π).
const VISUAL_CROSSING_API_KEY = 'LZSBVS9Y74M92SKSKBZMFKMEP'; 
const BASE_WEATHER_API_URL = 'https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline';

export default function WeatherDisplay({ mapCenter, zoom, selectedPolygonBounds, activeAnalysisType }) {
  const map = useMap(); // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Leaflet
  const [currentWeather, setCurrentWeather] = useState(null); // –¢–µ–∫—É—â–∏–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è (–¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏)
  const [allTimelineDays, setAllTimelineDays] = useState([]); // –í—Å–µ –¥–Ω–∏ (–∏—Å—Ç–æ—Ä–∏—è + –ø—Ä–æ–≥–Ω–æ–∑) –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const [todaySummary, setTodaySummary] = useState(null); // –°–≤–æ–¥–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏–∑ –º–∞—Å—Å–∏–≤–∞ –¥–Ω–µ–π (–¥–ª—è H/L)
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [isWidgetVisible, setIsWidgetVisible] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∏–¥–∂–µ—Ç–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ –≤–∏–¥–∂–µ—Ç–∞
  const [displayIndex, setDisplayIndex] = useState(0); 
  const [transitionClass, setTransitionClass] = useState(''); // –î–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –ø–æ–≥–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–¥–∞ –∏–∫–æ–Ω–∫–∏ Visual Crossing
  const getWeatherEmoji = (iconCode) => {
    switch (iconCode) {
      case 'clear-day': return '‚òÄÔ∏è';
      case 'clear-night': return 'üåô';
      case 'partly-cloudy-day': return '‚õÖ';
      case 'partly-cloudy-night': return '‚òÅÔ∏èüåô';
      case 'cloudy': return '‚òÅÔ∏è';
      case 'rain': return 'üåßÔ∏è';
      case 'snow': return '‚ùÑÔ∏è';
      case 'wind': return 'üå¨Ô∏è';
      case 'fog': return 'üå´Ô∏è';
      case 'thunder-rain': return '‚õàÔ∏è';
      case 'thunder-showers-day': return '‚õàÔ∏è';
      case 'thunder-showers-night': return '‚õàÔ∏è';
      case 'showers-day': return 'üå¶Ô∏è';
      case 'showers-night': return 'üåßÔ∏è';
      case 'hail': return 'üå®Ô∏è';
      default: return '‚ùì'; // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–≥–æ–¥–∞
    }
  };

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ YYYY-MM-DD
  const formatDate = (date) => {
    const d = new Date(date);
    if (isNaN(d.getTime())) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–æ–π
      console.error("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ formatDate:", date);
      return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞
    }
    const year = d.getFullYear();
    const month = String(d.getMonth() + 1).padStart(2, '0');
    const day = String(d.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
  const fetchWeatherData = useCallback(async (lat, lon) => {
    if (!VISUAL_CROSSING_API_KEY) { 
      setError('–û—à–∏–±–∫–∞: API-–∫–ª—é—á Visual Crossing –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–º–µ–Ω–∏—Ç–µ –µ–≥–æ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á.');
      setIsLoading(false); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å
      return;
    }
    setIsLoading(true);
    setError(null);
    setCurrentWeather(null);
    setAllTimelineDays([]);
    setTodaySummary(null);
    setDisplayIndex(0); 

    try {
      const today = new Date();
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(today.getDate() - 30); // 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
      const fifteenDaysFromNow = new Date();
      fifteenDaysFromNow.setDate(today.getDate() + 15); // 15 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥ (–ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞)

      const thirtyDaysAgoFormatted = formatDate(thirtyDaysAgo);
      const fifteenDaysFromNowFormatted = formatDate(fifteenDaysFromNow);

      // –ï—Å–ª–∏ –∫–∞–∫–∞—è-—Ç–æ –∏–∑ –¥–∞—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–∞, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –∑–∞–ø—Ä–æ—Å
      if (!thirtyDaysAgoFormatted || !fifteenDaysFromNowFormatted) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã.');
      }

      // –ï–¥–∏–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ–∫—É—â–∏—Ö —É—Å–ª–æ–≤–∏–π, –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥, —á—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –µ–¥–∏–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é —à–∫–∞–ª—É
      const response = await fetch(
        `${BASE_WEATHER_API_URL}/${lat},${lon}/${thirtyDaysAgoFormatted}/${fifteenDaysFromNowFormatted}?unitGroup=metric&key=${VISUAL_CROSSING_API_KEY}&lang=ru&include=current,days`
      );
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≥–æ–¥—ã: ${response.status} - ${errorText}`);
      }
      const data = await response.json();
      console.log("–î–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã –æ—Ç API:", data); // –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –≤–∏–¥–∂–µ—Ç–∞
      if (data.currentConditions) {
        let currentDatetimeForDisplay = data.currentConditions.datetime;
        
        // Visual Crossing API currentConditions.datetime —á–∞—Å—Ç–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "14:30:00").
        // –ù–∞–º –Ω—É–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –µ–≥–æ —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π, —á—Ç–æ–±—ã new Date() –º–æ–≥ –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å.
        if (currentDatetimeForDisplay && currentDatetimeForDisplay.includes(':') && !currentDatetimeForDisplay.includes('-')) {
          const todayDateString = formatDate(new Date()); // –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
          currentDatetimeForDisplay = `${todayDateString}T${currentDatetimeForDisplay}`; // –§–æ—Ä–º–∏—Ä—É–µ–º ISO-–ø–æ–¥–æ–±–Ω—É—é —Å—Ç—Ä–æ–∫—É
        }

        setCurrentWeather({
          ...data.currentConditions,
          datetime: currentDatetimeForDisplay // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ datetime
        });
      } else {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ API.');
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã (–∏—Å—Ç–æ—Ä–∏—è + –ø—Ä–æ–≥–Ω–æ–∑) –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      if (data.days && data.days.length > 0) {
        setAllTimelineDays(data.days);
        // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –≤ –º–∞—Å—Å–∏–≤–µ allTimelineDays
        const todayDateString = formatDate(today);
        const todayIndexInTimeline = data.days.findIndex(day => day.datetime === todayDateString);
        setDisplayIndex(todayIndexInTimeline !== -1 ? todayIndexInTimeline : 0); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è H/L –≤ –≥–ª–∞–≤–Ω–æ–π —Å–µ–∫—Ü–∏–∏
        if (todayIndexInTimeline !== -1) {
          setTodaySummary(data.days[todayIndexInTimeline]);
        }
      } else {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã (–∏—Å—Ç–æ—Ä–∏—è/–ø—Ä–æ–≥–Ω–æ–∑) –∏–∑ –æ—Ç–≤–µ—Ç–∞ API.');
      }

    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ:', err);
      setError(err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.');
    } finally {
      setIsLoading(false);
    }
  }, []);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –∑–∞—Ç–µ–º —Ä–∞–∑ –≤ —á–∞—Å
  useEffect(() => {
    if (!map) return;

    let targetLat, targetLon;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    if (activeAnalysisType && activeAnalysisType !== 'none' && selectedPolygonBounds) {
        const center = selectedPolygonBounds.getCenter();
        targetLat = center.lat;
        targetLon = center.lng;
        console.log("WeatherDisplay: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä –ø–æ–ª–∏–≥–æ–Ω–∞ –¥–ª—è –ø–æ–≥–æ–¥—ã:", targetLat, targetLon);
    } else {
        const currentCenter = map.getCenter();
        targetLat = currentCenter.lat;
        targetLon = currentCenter.lng;
        console.log("WeatherDisplay: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–≥–æ–¥—ã:", targetLat, targetLon);
    }

    // –í—ã–∑—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã —Å—Ä–∞–∑—É –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    fetchWeatherData(targetLat, targetLon);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑ –≤ —á–∞—Å (3600000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ = 1 —á–∞—Å)
    const intervalId = setInterval(() => {
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ –±—ã–ª–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞
        let currentTargetLat, currentTargetLon;
        if (activeAnalysisType && activeAnalysisType !== 'none' && selectedPolygonBounds) {
            const center = selectedPolygonBounds.getCenter();
            currentTargetLat = center.lat;
            currentTargetLon = center.lng;
        } else {
            const currentCenter = map.getCenter();
            currentTargetLat = currentCenter.lat;
            currentTargetLon = currentCenter.lng;
        }
        fetchWeatherData(currentTargetLat, currentTargetLon);
    }, 3600000); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑ –≤ —á–∞—Å

    // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => {
      clearInterval(intervalId);
    };
  }, [map, fetchWeatherData, selectedPolygonBounds, activeAnalysisType]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: map, fetchWeatherData, selectedPolygonBounds, activeAnalysisType

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ü—Ä–µ–¥—ã–¥—É—â–∏–π" –∏ "–°–ª–µ–¥—É—é—â–∏–π"
  const handlePrevDay = () => {
    if (displayIndex > 0) {
      setTransitionClass('slide-out-right');
      setTimeout(() => {
        setDisplayIndex(prev => prev - 1);
        setTransitionClass('slide-in-left');
      }, 300); // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
    }
  };

  const handleNextDay = () => {
    if (displayIndex < allTimelineDays.length - 1) {
      setTransitionClass('slide-out-left');
      setTimeout(() => {
        setDisplayIndex(prev => prev + 1);
        setTransitionClass('slide-in-right');
      }, 300); // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–Ω—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
  const renderDailyCard = (dayData) => {
    if (!dayData) return null;
    const dateString = dayData.datetime;
    let formattedDate = '–ù/–î';
    if (dateString) {
      const d = new Date(dateString);
      if (!isNaN(d.getTime())) {
        formattedDate = d.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' });
      } else {
        console.warn("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –≤ dayData.datetime –¥–ª—è daily card:", dateString);
      }
    } else {
      console.warn("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: dayData.datetime –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è daily card.");
    }

    return (
      <div className={`weather-daily-card ${transitionClass}`}>
        <p className="weather-daily-card-date">
          {formattedDate}
        </p>
        {dayData.icon && <span className="weather-daily-card-emoji">{getWeatherEmoji(dayData.icon)}</span>}
        <p className="weather-daily-card-temp">{dayData.temp ? dayData.temp.toFixed(0) : '–ù/–î'}¬∞</p>
        <p className="weather-daily-card-conditions">{dayData.conditions || ''}</p>
      </div>
    );
  };

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–æ–∫
  // –í–∏–¥–∂–µ—Ç –≤—Å–µ–≥–¥–∞ —Å–∫—Ä—ã—Ç, –µ—Å–ª–∏ isWidgetVisible === false
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∏–¥–∂–µ—Ç –≤–∏–¥–∏–º
  if (isLoading) {
    return (
      <>
        {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∏–¥–∂–µ—Ç–∞ */}
        <button 
          className="toggle-weather-button" 
          onClick={() => setIsWidgetVisible(prev => !prev)}
          title={isWidgetVisible ? '–°–∫—Ä—ã—Ç—å –ø–æ–≥–æ–¥—É' : '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É'}
        >
          <span className="weather-toggle-icon">{isWidgetVisible ? 'üåô' : '‚òÄÔ∏è'}</span>
        </button>
        <div className="weather-widget-container" style={{ display: isWidgetVisible ? 'flex' : 'none' }}>
          <div className="weather-header">
            <h3 className="weather-title">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–≥–æ–¥—ã...</h3>
          </div>
        </div>
      </>
    );
  }

  if (error) {
    return (
      <>
        {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∏–¥–∂–µ—Ç–∞ */}
        <button 
          className="toggle-weather-button" 
          onClick={() => setIsWidgetVisible(prev => !prev)}
          title={isWidgetVisible ? '–°–∫—Ä—ã—Ç—å –ø–æ–≥–æ–¥—É' : '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É'}
        >
          <span className="weather-toggle-icon">{isWidgetVisible ? 'üåô' : '‚òÄÔ∏è'}</span>
        </button>
        <div className="weather-widget-container weather-error-state" style={{ display: isWidgetVisible ? 'flex' : 'none' }}>
          <div className="weather-header">
            <h3 className="weather-title">–û—à–∏–±–∫–∞</h3>
          </div>
          <p>{error}</p>
        </div>
      </>
    );
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
  if (!currentWeather || allTimelineDays.length === 0) {
    return (
      <>
        {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∏–¥–∂–µ—Ç–∞ */}
        <button 
          className="toggle-weather-button" 
          onClick={() => setIsWidgetVisible(prev => !prev)}
          title={isWidgetVisible ? '–°–∫—Ä—ã—Ç—å –ø–æ–≥–æ–¥—É' : '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É'}
        >
          <span className="weather-toggle-icon">{isWidgetVisible ? 'üåô' : '‚òÄÔ∏è'}</span>
        </button>
      </>
    );
  }

  const { temp, feelslike, humidity, windspeed, icon, conditions, datetime } = currentWeather; 
  
  // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ datetime —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –≤–∞–ª–∏–¥–µ–Ω –ø–µ—Ä–µ–¥ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  let currentDate = '–ù/–î';
  if (datetime) {
    const d = new Date(datetime);
    if (!isNaN(d.getTime())) {
      currentDate = d.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: 'numeric' });
    } else {
      console.warn("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –≤ currentWeather.datetime:", datetime);
    }
  } else {
    console.warn("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: currentWeather.datetime –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.");
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const isPrevDisabled = displayIndex === 0;
  const isNextDisabled = displayIndex === allTimelineDays.length - 1;

  return (
    <>
      {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∏–¥–∂–µ—Ç–∞ */}
      <button 
        className="toggle-weather-button" 
        onClick={() => setIsWidgetVisible(prev => !prev)}
        title={isWidgetVisible ? '–°–∫—Ä—ã—Ç—å –ø–æ–≥–æ–¥—É' : '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É'}
      >
        <span className="weather-toggle-icon">{isWidgetVisible ? 'üåô' : '‚òÄÔ∏è'}</span>
      </button>

      {/* –°–∞–º –≤–∏–¥–∂–µ—Ç –ø–æ–≥–æ–¥—ã */}
      <div className="weather-widget-container" style={{ display: isWidgetVisible ? 'flex' : 'none' }}>
        <div className="weather-header">
          <h3 className="weather-title">
            <span className="weather-icon-large">{getWeatherEmoji(icon)}</span> –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –ø–æ–≥–æ–¥–∞
          </h3>
          <span className="weather-date">{currentDate}</span>
        </div>

        <div className="weather-main">
          <div className="weather-temp-display">
            {icon && <span className="weather-main-emoji">{getWeatherEmoji(icon)}</span>}
            <p className="weather-temp-value">{temp ? temp.toFixed(1) : '–ù/–î'}¬∞</p>
          </div>
          <div className="weather-description-feels-like">
            <p className="weather-description">{conditions || '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</p>
            <p className="weather-feels-like">–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feelslike ? feelslike.toFixed(1) : '–ù/–î'}¬∞C</p>
            {/* H/L –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –±–µ—Ä–µ–º –∏–∑ todaySummary */}
            {todaySummary && (
              <p className="weather-feels-like">
                H:{todaySummary.tempmax ? todaySummary.tempmax.toFixed(1) : '–ù/–î'}¬∞ L:{todaySummary.tempmin ? todaySummary.tempmin.toFixed(1) : '–ù/–î'}¬∞
              </p>
            )}
          </div>
        </div>

        <div className="weather-details-grid">
          <div className="weather-detail-item">
            <span className="weather-detail-icon">üíß</span>
            <div>
              <p className="weather-detail-value">{humidity ? humidity.toFixed(0) : '–ù/–î'}%</p>
              <p className="weather-detail-label">–í–ª–∞–∂–Ω–æ—Å—Ç—å</p>
            </div>
          </div>
          <div className="weather-detail-item">
            <span className="weather-detail-icon">üí®</span>
            <div>
              <p className="weather-detail-value">{windspeed ? windspeed.toFixed(1) : '–ù/–î'} –º/—Å</p>
              <p className="weather-detail-label">–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞</p>
            </div>
          </div>
        </div>

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –¥–Ω—è–º (–∏—Å—Ç–æ—Ä–∏—è –∏ –ø—Ä–æ–≥–Ω–æ–∑) */}
        {allTimelineDays.length > 0 && (
          <div className="weather-daily-navigation">
            <button onClick={handlePrevDay} disabled={isPrevDisabled} className="weather-nav-button">
              &lt;
            </button>
            {renderDailyCard(allTimelineDays[displayIndex])}
            <button onClick={handleNextDay} disabled={isNextDisabled} className="weather-nav-button">
              &gt;
            </button>
          </div>
        )}
      </div>
    </>
  );
}
