// components/ForMap/Metrics/SWIRDisplay.jsx
import React, { useState } from 'react';

const SWIRDisplay = ({ activeAnalysisType, layerSelectionBlockWidth, isLayerSelectionBlockExpanded }) => {
  const [isMetricExpanded, setIsMetricExpanded] = useState(true);

  // –ú–µ—Ç—Ä–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ activeAnalysisType —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç
  // –ò LayerSelectionBlock –ù–ï —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç
  if (activeAnalysisType !== 'SWIR' || isLayerSelectionBlockExpanded) {
    return null;
  }

  const containerStyle = {
    position: 'absolute',
    bottom: '40px',
    left: `calc(10px + ${layerSelectionBlockWidth}px + 25px)`,
    backgroundColor: 'rgba(26, 26, 26, 0.9)',
    color: '#f0f0f0',
    padding: '8px 12px',
    borderRadius: '10px',
    boxShadow: '0 3px 6px rgba(0, 0, 0, 0.3)',
    zIndex: 1000,
    minWidth: isMetricExpanded ? '200px' : '50px',
    maxWidth: isMetricExpanded ? '300px' : '50px', // Adjusted maxWidth for expanded state
    height: isMetricExpanded ? 'auto' : '50px',
    overflow: 'hidden',
    display: 'flex',
    flexDirection: 'column',
    fontFamily: 'Inter, sans-serif',
    border: '1px solid rgba(255, 255, 255, 0.1)',
    transition: 'all 0.3s ease',
    alignItems: 'center',
    justifyContent: 'center',
    cursor: isMetricExpanded ? 'default' : 'pointer',
    // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    '@media (max-width: 600px)': {
      left: `calc(5px + 45px + 10px)`, // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–≤–µ—Ä–Ω—É—Ç–æ–≥–æ LayerSelectionBlock
      bottom: '10px', // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
      padding: '6px 10px',
      borderRadius: '5px',
      minWidth: isMetricExpanded ? '150px' : '40px',
      maxWidth: isMetricExpanded ? '180px' : '40px',
      height: isMetricExpanded ? 'auto' : '40px',
    },
  };

  const titleRowStyle = {
    display: 'flex',
    alignItems: 'center',
    justifyContent: isMetricExpanded ? 'space-between' : 'center', // Centered when collapsed
    width: '100%',
    gap: '4px',
    marginBottom: isMetricExpanded ? '4px' : '0',
  };

  const titleStyle = {
    margin: '0',
    fontSize: '13px',
    color: '#4CAF50',
    textAlign: 'center',
    flexShrink: 0,
    // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    '@media (max-width: 600px)': {
      fontSize: '11px',
    },
  };

  const collapseButtonStyle = {
    backgroundColor: 'transparent',
    border: 'none',
    color: '#f0f0f0',
    fontSize: '16px',
    cursor: 'pointer',
    padding: '0',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    flexShrink: 0,
    // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    '@media (max-width: 600px)': {
      fontSize: '14px',
    },
  };

  const descriptionStyle = {
    margin: '0 0 8px 0',
    fontSize: '10px',
    color: '#bbb',
    textAlign: 'left',
    lineHeight: '1.4',
    // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    '@media (max-width: 600px)': {
      fontSize: '9px',
    },
  };

  return (
    <div style={containerStyle} onClick={() => !isMetricExpanded && setIsMetricExpanded(true)}>
      <div style={titleRowStyle}>
        {isMetricExpanded ? (
          <>
            <h4 style={titleStyle}>SWIR (–ö–æ—Ä–æ—Ç–∫–æ–≤–æ–ª–Ω–æ–≤—ã–π –ò–ö)</h4>
            <button
              onClick={(e) => { e.stopPropagation(); setIsMetricExpanded(false); }}
              style={collapseButtonStyle}
              aria-expanded="true"
              aria-label="–°–≤–µ—Ä–Ω—É—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ SWIR"
            >
              {/* –°—Ç—Ä–µ–ª–∫–∞ –≤–≤–µ—Ä—Ö */}
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <polyline points="18 15 12 9 6 15"></polyline>
              </svg>
            </button>
          </>
        ) : (
          <>
            <span style={{ fontSize: '12px', color: '#f0f0f0', userSelect: 'none' }}>SWIR</span>
            <button
              onClick={(e) => { e.stopPropagation(); setIsMetricExpanded(true); }}
              style={collapseButtonStyle}
              aria-expanded="false"
              aria-label="–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ SWIR"
            >
              {/* –ù–µ—Ç —Å—Ç—Ä–µ–ª–∫–∏ –≤–Ω–∏–∑ –≤ —Å–≤–µ—Ä–Ω—É—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ */}
            </button>
          </>
        )}
      </div>

      {isMetricExpanded && (
        <p style={descriptionStyle}>
          –≠—Ç–∞ –∫–æ–º–ø–æ–∑–∏—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ–≤–æ–ª–Ω–æ–≤—ã–µ –∏–Ω—Ñ—Ä–∞–∫—Ä–∞—Å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã (SWIR2, SWIR1) –∏ –±–ª–∏–∂–Ω–∏–π –∏–Ω—Ñ—Ä–∞–∫—Ä–∞—Å–Ω—ã–π (NIR) –∏–ª–∏ –∫—Ä–∞—Å–Ω—ã–π –∫–∞–Ω–∞–ª (SWIR2, SWIR1, Red).
          <br/><br/>
          üî• <span style={{ color: '#FF4500', fontWeight: 'bold' }}>–ì–æ—Ä–µ–ª—å–Ω–∏–∫–∏ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∂–∞—Ä—ã</span> –æ—á–µ–Ω—å —è—Ä–∫–æ –≤—ã–¥–µ–ª—è—é—Ç—Å—è –∫—Ä–∞—Å–Ω—ã–º–∏/–æ—Ä–∞–Ω–∂–µ–≤—ã–º–∏ –æ—Ç—Ç–µ–Ω–∫–∞–º–∏.
          <br/>
          üåø <span style={{ color: '#32CD32', fontWeight: 'bold' }}>–†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</span> –≤—ã–≥–ª—è–¥–∏—Ç —è—Ä–∫–æ-–∑–µ–ª–µ–Ω–æ–π, –ø–æ—á—Ç–∏ —Ñ–ª—É–æ—Ä–µ—Å—Ü–µ–Ω—Ç–Ω–æ–π.
          <br/>
          üíß <span style={{ color: '#000080', fontWeight: 'bold' }}>–í–æ–¥–∞</span> –ø–æ–≥–ª–æ—â–∞–µ—Ç SWIR, –ø–æ—ç—Ç–æ–º—É –≤—ã–≥–ª—è–¥–∏—Ç –æ—á–µ–Ω—å —Ç–µ–º–Ω–æ–π –∏–ª–∏ —á–µ—Ä–Ω–æ–π.
          <br/>
          üèôÔ∏è <span style={{ color: '#F0F8FF', fontWeight: 'bold' }}>–ì–æ—Ä–æ–¥—Å–∫–∏–µ —Ä–∞–π–æ–Ω—ã –∏ –≥–æ–ª–∞—è –ø–æ—á–≤–∞</span> –º–æ–≥—É—Ç –∏–º–µ—Ç—å –±–µ–ª–æ-–±–∏—Ä—é–∑–æ–≤—ã–µ –∏–ª–∏ –∫–æ—Ä–∏—á–Ω–µ–≤–æ-—Ä–æ–∑–æ–≤—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏.
        </p>
      )}
    </div>
  );
};

export default SWIRDisplay;
